import { useState } from "react";
import { 
  Card, 
  CardContent, 
  CardDescription, 
  CardHeader, 
  CardTitle 
} from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Button } from "@/components/ui/button";
import { 
  ArrowUpRight, 
  Brain, 
  TrendingUp, 
  AlertTriangle, 
  BarChart4, 
  Calendar, 
  ChevronsUpDown, 
  RefreshCw, 
  Check, 
  AlertCircle, 
  ThumbsUp, 
  MessagesSquare 
} from "lucide-react";
import { Progress } from "@/components/ui/progress";
import { Badge } from "@/components/ui/badge";
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";

interface AIInsightsPanelProps {
  entityId: number;
  entityName: string;
}

interface Insight {
  id: string;
  title: string;
  description: string;
  type: "positive" | "negative" | "neutral";
  relevanceScore: number;
  generatedDate: string;
}

interface Report {
  id: string;
  title: string;
  description: string;
  generatedDate: string;
  status: "complete" | "pending" | "error";
}

interface Model {
  id: string;
  name: string;
  type: string;
  accuracy: number;
  status: "active" | "inactive";
}

export const AIInsightsPanel = ({ entityId, entityName }: AIInsightsPanelProps) => {
  const [insights, setInsights] = useState<Insight[]>([
    {
      id: "1",
      title: "Revenue Growth Opportunity",
      description: "AI predicts a 15% increase in revenue next quarter based on market trends.",
      type: "positive",
      relevanceScore: 0.85,
      generatedDate: "2023-12-01"
    },
    {
      id: "2",
      title: "Potential Cost Overruns",
      description: "AI identifies potential cost overruns in the supply chain due to rising raw material prices.",
      type: "negative",
      relevanceScore: 0.92,
      generatedDate: "2023-11-28"
    },
    {
      id: "3",
      title: "Customer Churn Analysis",
      description: "AI indicates a slight increase in customer churn rate in the last month.",
      type: "neutral",
      relevanceScore: 0.78,
      generatedDate: "2023-11-25"
    }
  ]);

  const [reports, setReports] = useState<Report[]>([
    {
      id: "1",
      title: "Financial Performance Report",
      description: "Comprehensive report on the financial performance of the entity.",
      generatedDate: "2023-12-05",
      status: "complete"
    },
    {
      id: "2",
      title: "Risk Assessment Report",
      description: "Detailed risk assessment report generated by AI.",
      generatedDate: "2023-12-01",
      status: "pending"
    }
  ]);

  const [models, setModels] = useState<Model[]>([
    {
      id: "1",
      name: "Revenue Forecasting Model",
      type: "Regression",
      accuracy: 0.95,
      status: "active"
    },
    {
      id: "2",
      name: "Risk Assessment Model",
      type: "Classification",
      accuracy: 0.88,
      status: "active"
    }
  ]);

  const [isGeneratingReport, setIsGeneratingReport] = useState(false);
  const [isTrainingModel, setIsTrainingModel] = useState(false);

  const handleGenerateReport = () => {
    setIsGeneratingReport(true);
    setTimeout(() => {
      const newReport: Report = {
        id: Date.now().toString(),
        title: "New AI Generated Report",
        description: "This is a new report generated by the AI.",
        generatedDate: new Date().toLocaleDateString(),
        status: "complete"
      };
      setReports([...reports, newReport]);
      setIsGeneratingReport(false);
    }, 3000);
  };

  const handleTrainModel = () => {
    setIsTrainingModel(true);
    setTimeout(() => {
      const newModel: Model = {
        id: Date.now().toString(),
        name: "New AI Model",
        type: "Classification",
        accuracy: 0.92,
        status: "active"
      };
      setModels([...models, newModel]);
      setIsTrainingModel(false);
    }, 4000);
  };

  const getInsightBadgeColor = (type: Insight["type"]) => {
    switch (type) {
      case "positive":
        return "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300";
      case "negative":
        return "bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300";
      case "neutral":
        return "bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300";
    }
  };

  return (
    <Card className="mb-6 border border-purple-100 dark:border-purple-800">
      <CardHeader className="pb-2">
        <CardTitle className="text-lg font-medium flex items-center gap-2">
          <Brain className="h-5 w-5 text-purple-600 dark:text-purple-400" />
          AI Insights & Recommendations
        </CardTitle>
        <CardDescription>
          Harness the power of AI to gain actionable insights for {entityName}
        </CardDescription>
      </CardHeader>
      <CardContent>
        <Tabs defaultValue="insights" className="space-y-4">
          <TabsList>
            <TabsTrigger value="insights">Key Insights</TabsTrigger>
            <TabsTrigger value="reports">AI Generated Reports</TabsTrigger>
            <TabsTrigger value="models">AI Models</TabsTrigger>
          </TabsList>
          <TabsContent value="insights" className="space-y-4">
            {insights.length === 0 ? (
              <div className="p-8 text-center border border-dashed rounded-lg">
                <Brain className="h-10 w-10 mx-auto mb-4 text-muted-foreground/60" />
                <h3 className="text-lg font-medium mb-2">No insights available</h3>
                <p className="text-muted-foreground mb-4">
                  AI is analyzing data to generate insights for {entityName}.
                </p>
                <Button disabled>
                  <RefreshCw className="h-4 w-4 mr-2 animate-spin" /> Generating Insights...
                </Button>
              </div>
            ) : (
              <div className="space-y-4">
                {insights.map((insight) => (
                  <div key={insight.id} className="p-4 border rounded-lg">
                    <div className="flex items-start justify-between">
                      <div>
                        <h3 className="font-medium">{insight.title}</h3>
                        <p className="text-sm text-muted-foreground">{insight.description}</p>
                        <div className="mt-2 flex items-center gap-2">
                          <Badge className={getInsightBadgeColor(insight.type)}>
                            {insight.type.charAt(0).toUpperCase() + insight.type.slice(1)}
                          </Badge>
                          <span className="text-xs text-muted-foreground">
                            Generated on {insight.generatedDate}
                          </span>
                        </div>
                      </div>
                      <div className="text-right">
                        <span className="text-xs text-muted-foreground block">Relevance Score</span>
                        <div className="flex items-center gap-1">
                          <Progress value={insight.relevanceScore * 100} className="w-20" />
                          <span className="text-sm">{Math.round(insight.relevanceScore * 100)}%</span>
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </TabsContent>
          <TabsContent value="reports" className="space-y-4">
            <div className="flex justify-end">
              <Button onClick={handleGenerateReport} disabled={isGeneratingReport}>
                {isGeneratingReport ? (
                  <>
                    <RefreshCw className="mr-2 h-4 w-4 animate-spin" />
                    Generating...
                  </>
                ) : (
                  <>
                    <Calendar className="mr-2 h-4 w-4" />
                    Generate New Report
                  </>
                )}
              </Button>
            </div>
            {reports.length === 0 ? (
              <div className="p-8 text-center border border-dashed rounded-lg">
                <Calendar className="h-10 w-10 mx-auto mb-4 text-muted-foreground/60" />
                <h3 className="text-lg font-medium mb-2">No reports generated</h3>
                <p className="text-muted-foreground mb-4">
                  Generate AI-driven reports for in-depth analysis of {entityName}.
                </p>
                <Button onClick={handleGenerateReport} disabled={isGeneratingReport}>
                  {isGeneratingReport ? (
                    <>
                      <RefreshCw className="mr-2 h-4 w-4 animate-spin" />
                      Generating...
                    </>
                  ) : (
                    <>
                      <Calendar className="mr-2 h-4 w-4" />
                      Generate New Report
                    </>
                  )}
                </Button>
              </div>
            ) : (
              <div className="space-y-4">
                {reports.map((report) => (
                  <div key={report.id} className="p-4 border rounded-lg">
                    <div className="flex items-start justify-between">
                      <div>
                        <h3 className="font-medium">{report.title}</h3>
                        <p className="text-sm text-muted-foreground">{report.description}</p>
                        <div className="mt-2 flex items-center gap-2">
                          <Badge variant="secondary">
                            {report.status.charAt(0).toUpperCase() + report.status.slice(1)}
                          </Badge>
                          <span className="text-xs text-muted-foreground">
                            Generated on {report.generatedDate}
                          </span>
                        </div>
                      </div>
                      <Button variant="ghost">
                        <ArrowUpRight className="h-4 w-4 mr-2" />
                        View Report
                      </Button>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </TabsContent>
          <TabsContent value="models" className="space-y-4">
            <div className="flex justify-end">
              <Button onClick={handleTrainModel} disabled={isTrainingModel}>
                {isTrainingModel ? (
                  <>
                    <RefreshCw className="mr-2 h-4 w-4 animate-spin" />
                    Training...
                  </>
                ) : (
                  <>
                    <Brain className="mr-2 h-4 w-4" />
                    Train New Model
                  </>
                )}
              </Button>
            </div>
            {models.length === 0 ? (
              <div className="p-8 text-center border border-dashed rounded-lg">
                <Brain className="h-10 w-10 mx-auto mb-4 text-muted-foreground/60" />
                <h3 className="text-lg font-medium mb-2">No AI models available</h3>
                <p className="text-muted-foreground mb-4">
                  Train AI models to gain deeper insights into {entityName}'s data.
                </p>
                <Button onClick={handleTrainModel} disabled={isTrainingModel}>
                  {isTrainingModel ? (
                    <>
                      <RefreshCw className="mr-2 h-4 w-4 animate-spin" />
                      Training...
                    </>
                  ) : (
                    <>
                      <Brain className="mr-2 h-4 w-4" />
                      Train New Model
                    </>
                  )}
                </Button>
              </div>
            ) : (
              <div className="space-y-4">
                {models.map((model) => (
                  <div key={model.id} className="p-4 border rounded-lg">
                    <div className="flex items-start justify-between">
                      <div>
                        <h3 className="font-medium">{model.name}</h3>
                        <p className="text-sm text-muted-foreground">Type: {model.type}</p>
                        <div className="mt-2 flex items-center gap-2">
                          <Badge variant="secondary">
                            {model.status.charAt(0).toUpperCase() + model.status.slice(1)}
                          </Badge>
                          <span className="text-xs text-muted-foreground">
                            Accuracy: {Math.round(model.accuracy * 100)}%
                          </span>
                        </div>
                      </div>
                      <Button variant="ghost">
                        <TrendingUp className="h-4 w-4 mr-2" />
                        View Metrics
                      </Button>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </TabsContent>
        </Tabs>
      </CardContent>
    </Card>
  );
};
